{"version":3,"sources":["utilities/index.js","context/restaurantContext.js","components/TableRow/index.js","components/RestaurantsTable/index.js","components/FilterControls/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["cleanRestaurants","restaurants","map","restaurant","sortedGenres","genre","split","sort","a","b","display","name","RestaurantContext","createContext","TableRow","props","rowKeys","useContext","key","id","dataKey","join","RestaurantsTable","tableHeadings","genreFilter","stateFilter","search","filtersActive","page","setPage","useState","filteredRestaurants","setFilteredRestaurants","handlePageChange","e","target","innerText","useEffect","state","includes","length","city","filter","heading","pageStart","pageEnd","displayRestaurants","restaurantIndex","indexOf","makeRows","numPages","pageButtons","i","push","onClick","makePageButtons","FilterControls","genres","setGenreFilter","setStateFilter","setSearch","setFiltersActive","makeOptions","options","option","htmlFor","className","onChange","value","placeholder","preventDefault","searchTerm","document","querySelector","App","setRestaurants","setGenres","isLoading","setIsLoading","apiKey","fetch","headers","Authorization","then","response","json","results","cleanedRestaurants","catch","err","console","log","error","Error","message","fetchRestaurants","genresNoDupes","forEach","makeGenresList","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a85a412d.chunk.js","sourcesContent":["export const fetchRestaurants = (apiKey, setRestaurants, setIsLoading) => {\n\n    try {\n        fetch(\n          \"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n            headers: {\n              Authorization: apiKey\n            }\n          }\n        )\n        .then(response => response.json())\n        .then(results => {\n          const cleanedRestaurants = cleanRestaurants(results)\n          setIsLoading(false)\n          setRestaurants(cleanedRestaurants)})\n        .catch(err => console.log(err))\n      } catch (error){\n        throw new Error(error.message);\n      }\n}\n\nexport const cleanRestaurants = (restaurants) => {\n  \n  const displayRestaurants = restaurants.map(restaurant => {\n    const genresAsArray = restaurant.genre.split(\",\")\n    const sortedGenres = genresAsArray.sort((a, b) => (a > b) ? 1 : -1)\n    restaurant.genre = sortedGenres\n    return {...restaurant, display: true}\n  })\n  const sortedRestaurants = displayRestaurants.sort((a, b) => (a.name > b.name) ? 1 : -1)\n\n  return sortedRestaurants\n}","import { createContext } from 'react';\n\nconst RestaurantContext = createContext();\n\nexport default RestaurantContext;","import React, { useContext } from 'react';\nimport RestaurantContext from '../../context/restaurantContext';\nimport './tableRow.css'\n\nfunction TableRow (props) {\n\n    const { rowKeys } = useContext( RestaurantContext )\n\n    const { restaurant } = props;\n\n    const makeData = (dataKeys => {\n        return dataKeys.map(dataKey => {\n            if(typeof(restaurant[dataKey]) === \"string\"){\n                return <td key={dataKey}>{ restaurant[dataKey]}</td>\n            } else if(typeof(restaurant[dataKey] === \"object\")) {\n                \n                return <td key={dataKey}>{ restaurant[dataKey].join(\", \")}</td>\n            } \n        })\n    })\n\n    return (\n        <tr key={restaurant.id}>\n            { makeData(rowKeys) }\n        </tr>\n    )\n}\n\nexport default TableRow","import RestaurantContext from '../../context/restaurantContext';\nimport React, { useContext, useState, useEffect } from 'react';\nimport TableRow from '../TableRow';\nimport './restaurantsTable.css';\n\nfunction RestaurantsTable () {\n\n    const { restaurants, tableHeadings, genreFilter, stateFilter, search, filtersActive, page, setPage } = useContext( RestaurantContext )\n\n    const [filteredRestaurants, setFilteredRestaurants] = useState(restaurants)\n\n    const makeHeadings = (headingsArray) => {\n        return headingsArray.map(heading => <th key={heading} >{heading}</th>)\n    }\n\n    const handlePageChange = (e) => {\n        setPage(e.target.innerText)\n    }\n\n    const makeRows = () => {\n        let pageStart = page * 10 - 10\n        let pageEnd = page * 10 - 1\n\n        let displayRestaurants = filteredRestaurants.filter(restaurant => restaurant.display === true)\n\n        let restaurantsOnPage = displayRestaurants.filter(restaurant => {\n            const restaurantIndex = displayRestaurants.indexOf(restaurant)\n            if(restaurantIndex <= pageEnd && restaurantIndex >= pageStart) {\n                return restaurant\n            } \n        })\n        \n        return restaurantsOnPage.map(restaurant => <TableRow key={restaurant.id} restaurant={restaurant}/> )\n    }\n\n    const makePageButtons = () => {\n        const totalRestaurants = filteredRestaurants.filter(restaurant => restaurant.display === true) \n        const numPages = totalRestaurants.length / 10\n        let pageButtons = []\n        for(let i = 0; i < numPages; i++) {\n            pageButtons.push(<button key={i + 1}  onClick={(e) => handlePageChange(e)}>{i + 1}</button>)\n        }\n        return pageButtons\n    }\n\n    useEffect(() => {\n        setFilteredRestaurants(restaurants.map((restaurant) => {\n            restaurant.display = true\n            if(filtersActive) {\n                if(restaurant.display === true && restaurant.state !== stateFilter && stateFilter !== \"All\" ) {\n                    restaurant.display = false\n                }\n                if(restaurant.display === true && !restaurant.genre.includes(genreFilter) && genreFilter !== \"All\") {\n                    restaurant.display = false\n                }\n            }\n            if(restaurant.display === true && search.length && (restaurant.city.includes(search) || restaurant.name.includes(search) || restaurant.genre.includes(search))) {\n                restaurant.display = true\n            } else if (restaurant.display === true && search.length) {\n                restaurant.display = false\n            }\n            return restaurant\n        }))\n\n    }, [genreFilter, stateFilter, search, restaurants, filtersActive, page])\n\n    const checkForRestaurants = () => {\n        const trueRestaurants = filteredRestaurants.filter(restaurant => restaurant.display)\n        return trueRestaurants.length\n    }\n\n    return (\n        <div>\n            {\n                checkForRestaurants() \n                ?\n                <table>\n                    <thead>\n                        <tr>\n                            { makeHeadings(tableHeadings) }\n                        </tr>\n                    </thead>\n                    <tbody>\n                       { makeRows() }\n                    </tbody>\n                </table>\n                : <h1>No Restaurants Matching Filters</h1>\n            }\n            <p>Pages</p>\n            { makePageButtons() }\n        </div>\n    )\n}\n\nexport default RestaurantsTable","import React, { useContext } from 'react';\nimport RestaurantContext from '../../context/restaurantContext';\nimport './filterControls.css'\n\nfunction FilterControls () {\n\n    const { genres, setGenreFilter, setStateFilter, setSearch, filtersActive, setFiltersActive, setPage } = useContext(RestaurantContext);\n\n    const makeOptions = (options) => {\n        return options.map(option => <option key={ option } >{ option }</option>)\n    }\n\n    const stateCodes = [\"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\", \"GA\", \"HI\", \"IA\", \"ID\", \n                        \"IL\", \"IN\", \"KS\", \"KY\", \"LA\", \"MA\", \"MD\", \"ME\", \"MI\", \"MN\", \"MO\", \"MS\", \"MT\",\n                        \"NC\", \"ND\", \"NE\", \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OH\", \"OK\", \"OR\", \"PA\",\n                        \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VA\", \"VT\", \"WA\", \"WI\", \"WV\", \"WY\"]\n\n    const searchSubmit = (e) => {\n        e.preventDefault()\n        const searchTerm = document.querySelector('.search').value\n        setSearch(searchTerm)\n        setPage(1)\n    }\n\n    const handleChange = (e) => {\n        const searchTerm = e.target.value\n        if(searchTerm === \"\"){\n            setSearch(\"\")\n            setPage(1)\n        }\n    }\n\n    const toggleFiltersActive = (e) => {\n        e.preventDefault()\n        setFiltersActive(!filtersActive)\n    }\n\n    const chooseState = (e) => {\n        setStateFilter(e.target.value)\n        setPage(1)\n    }\n\n    const chooseGenre = (e) => {\n        setGenreFilter(e.target.value)\n        setPage(1)\n    }\n\n    return (\n        <form>\n            <div>\n                <label htmlFor=\"State\">State</label>\n                <select className=\"state-select\" name=\"State\" onChange={chooseState} >\n                    <option>All</option>\n                    {makeOptions(stateCodes)}\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"Genre\">Restaurant Type</label>\n                <select className=\"genre-select\" name=\"Genre\" onChange={chooseGenre} >\n                    <option>All</option>\n                    {makeOptions(genres)}\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"Search\">Search by Name, City, or Type</label>\n                <input className='search' placeholder=\"Search\" name=\"Search\" onChange={handleChange}/>\n                <button className='search-button' onClick={searchSubmit} >Submit</button>\n                <button onClick={toggleFiltersActive}>{\n                    filtersActive\n                    ? \"Remove Filters\"\n                    : \"Add Filters\"\n                }</button>\n            </div>\n        </form>\n    )\n}\n\nexport default FilterControls","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { fetchRestaurants } from '../../utilities';\nimport RestaurantContext from '../../context/restaurantContext';\nimport RestaurantsTable from '../RestaurantsTable';\nimport FilterControls from '../FilterControls';\n\nfunction App() {\n\n  const [restaurants, setRestaurants] = useState([])\n  const [genres, setGenres] = useState([])\n  const [genreFilter, setGenreFilter] = useState(\"All\")\n  const [stateFilter, setStateFilter] = useState(\"All\")\n  const [search, setSearch] = useState(\"\")\n  const [filtersActive, setFiltersActive] = useState(true)\n  const [page, setPage] = useState(1)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const auth = \"Api-Key \" + process.env.REACT_APP_AUTH\n  const tableHeadings = [\"Name\", \"City\", \"State\", \"Phone Number\", \"Restaurant Type\"]\n  const rowKeys = [\"name\", \"city\", \"state\", \"telephone\", \"genre\"]\n\n  const makeGenresList = (restaurants) => {\n    let genresNoDupes = []\n    restaurants.forEach(restaurant => {\n      for(let i = 0; i < restaurant.genre.length; i++) {\n        if(!genresNoDupes.includes(restaurant.genre[i])){\n          genresNoDupes.push(restaurant.genre[i])\n        }\n      }\n    })\n    const sortedGenres = genresNoDupes.sort((a, b) => (a > b) ? 1 : -1)\n\n    setGenres(sortedGenres)\n  }\n\n  useEffect( () => {\n    fetchRestaurants(auth, setRestaurants, setIsLoading)\n    makeGenresList(restaurants)\n  }, [restaurants])\n\n\n  return (\n    <RestaurantContext.Provider value={{\n        tableHeadings,\n        rowKeys,\n        restaurants,\n        genres,\n        genreFilter,\n        setGenreFilter,\n        stateFilter,\n        setStateFilter,\n        search,\n        setSearch,\n        setRestaurants,\n        filtersActive,\n        setFiltersActive,\n        page,\n        setPage\n      }\n    }>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Restaurant Table App</h1>\n        </header>\n        <main>\n          <section>\n            <FilterControls />\n          </section>\n          <section>\n            { isLoading\n              ? <h1>Loading Restaurants Table</h1>\n              : <RestaurantsTable />\n            }\n          </section>\n        </main>\n      </div>\n    </RestaurantContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}