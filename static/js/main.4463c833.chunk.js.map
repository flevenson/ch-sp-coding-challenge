{"version":3,"sources":["utilities/index.js","context/restaurantContext.js","components/TableRow/index.js","components/RestaurantsTable/index.js","components/FilterControls/index.js","components/App/App.js","serviceWorker.js","index.js"],"names":["cleanRestaurants","restaurants","map","restaurant","display","sort","a","b","name","RestaurantContext","createContext","TableRow","props","rowKeys","useContext","key","id","dataKey","RestaurantsTable","tableHeadings","genreFilter","stateFilter","search","filtersActive","page","setPage","useState","filteredRestaurants","setFilteredRestaurants","handlePageChange","e","target","innerText","useEffect","state","genre","includes","length","city","heading","filter","pageStart","pageEnd","displayRestaurants","restaurantIndex","indexOf","makeRows","numPages","pageButtons","i","push","className","onClick","makePageButtons","FilterControls","genres","setGenreFilter","setStateFilter","setSearch","setFiltersActive","makeOptions","options","option","htmlFor","onChange","value","placeholder","preventDefault","searchTerm","document","querySelector","App","setRestaurants","setGenres","apiKey","fetch","headers","Authorization","then","response","json","results","cleanedRestaurants","catch","err","console","log","error","Error","message","fetchRestaurants","genresNoDupes","genreString","split","forEach","genresList","makeGenresList","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4463c833.chunk.js","sourcesContent":["export const fetchRestaurants = (apiKey, setRestaurants) => {\n    try {\n        fetch(\n          \"https://code-challenge.spectrumtoolbox.com/api/restaurants\", {\n            headers: {\n              Authorization: apiKey\n            }\n          }\n        )\n        .then(response => response.json())\n        .then(results => {\n          const cleanedRestaurants = cleanRestaurants(results)\n          setRestaurants(cleanedRestaurants)})\n        .catch(err => console.log(err))\n      } catch (error){\n        throw new Error(error.message);\n      }\n}\n\nexport const cleanRestaurants = (restaurants) => {\n  \n  const displayRestaurants = restaurants.map(restaurant => {\n    return {...restaurant, display: true}\n  })\n  const sortedRestaurants = displayRestaurants.sort((a, b) => (a.name > b.name) ? 1 : -1)\n\n  return sortedRestaurants\n}","import { createContext } from 'react';\n\nconst RestaurantContext = createContext();\n\nexport default RestaurantContext;","import React, { useContext } from 'react';\nimport RestaurantContext from '../../context/restaurantContext';\nimport './tableRow.css'\n\nfunction TableRow (props) {\n\n    const { rowKeys } = useContext( RestaurantContext )\n\n    const { restaurant } = props;\n\n    const makeData = (dataKeys => {\n        return dataKeys.map(dataKey => <td key={dataKey}>{ restaurant[dataKey] }</td>) \n    })\n\n    return (\n        <tr key={restaurant.id}>\n            { makeData(rowKeys) }\n        </tr>\n    )\n}\n\nexport default TableRow","import RestaurantContext from '../../context/restaurantContext';\nimport React, { useContext, useState, useEffect } from 'react';\nimport TableRow from '../TableRow';\nimport './restaurantsTable.css';\n\nfunction RestaurantsTable () {\n\n    const { restaurants, tableHeadings, genreFilter, stateFilter, search, filtersActive, page, setPage } = useContext( RestaurantContext )\n\n    const [filteredRestaurants, setFilteredRestaurants] = useState(restaurants)\n\n    const makeHeadings = (headingsArray) => {\n        return headingsArray.map(heading => <th key={heading} >{heading}</th>)\n    }\n\n    // const toggleActivePageButton = (e) => {\n    //     const pageButtons = document.querySelectorAll(`.page-button`)\n    //     pageButtons.forEach(pageButton => {\n    //         pageButton.classList.remove(\"active\")\n    //     })\n    //     pageButtons[(e.target.innerText - 1)].classList.toggle(\"active\")\n    // }\n\n    const handlePageChange = (e) => {\n        setPage(e.target.innerText)\n        // toggleActivePageButton(e)\n    }\n\n    const makeRows = () => {\n\n    let pageStart = page * 10 - 10\n    let pageEnd = page * 10 - 1\n\n    let displayRestaurants = filteredRestaurants.filter(restaurant => restaurant.display === true)\n\n    let rowsOnPage = displayRestaurants.filter(restaurant => {\n        const restaurantIndex = displayRestaurants.indexOf(restaurant)\n      if(restaurantIndex <= pageEnd && restaurantIndex >= pageStart) {\n          return restaurant\n      } \n    })\n        \n    return rowsOnPage.map(restaurant => <TableRow key={restaurant.id} restaurant={restaurant}/> )\n    }\n\n    const makePageButtons = () => {\n        const totalRestaurants = filteredRestaurants.filter(restaurant => restaurant.display === true) \n        const numPages = totalRestaurants.length / 10\n        let pageButtons = []\n        for(let i = 0; i < numPages; i++) {\n            pageButtons.push(<button className={`page-button`} onClick={(e) => handlePageChange(e)}>{i + 1}</button>)\n        }\n\n        return pageButtons\n    }\n\n    useEffect(() => {\n        setFilteredRestaurants(restaurants.map((restaurant) => {\n            restaurant.display = true\n            if(filtersActive) {\n                if(restaurant.display === true && restaurant.state !== stateFilter && stateFilter !== \"All\" ) {\n                    restaurant.display = false\n                }\n                if(restaurant.display === true && !restaurant.genre.includes(genreFilter) && genreFilter !== \"All\") {\n                    restaurant.display = false\n                }\n            }\n            if(restaurant.display === true && search.length && (restaurant.city.includes(search) || restaurant.name.includes(search) || restaurant.genre.includes(search))) {\n                restaurant.display = true\n            } else if (restaurant.display === true && search.length) {\n                restaurant.display = false\n            }\n            return restaurant\n        }))\n\n\n    }, [genreFilter, stateFilter, search, restaurants, filtersActive, page])\n\n    const checkForRestaurants = () => {\n        const trueRestaurants = filteredRestaurants.filter(restaurant => restaurant.display)\n        return trueRestaurants.length\n    }\n\n    return (\n        <div>\n            <table>\n                <thead>\n                    <tr>\n                        { makeHeadings(tableHeadings) }\n                    </tr>\n                </thead>\n                <tbody>\n                    { \n                        checkForRestaurants() \n                        ? makeRows() \n                        : <p>No Matching restaurants</p>\n                    }\n                </tbody>\n            </table>\n            {makePageButtons()}\n        </div>\n    )\n}\n\nexport default RestaurantsTable","import React, { useContext } from 'react';\nimport RestaurantContext from '../../context/restaurantContext';\nimport './filterControls.css'\n\nfunction FilterControls () {\n\n    const { genres, setGenreFilter, setStateFilter, setSearch, filtersActive, setFiltersActive, setPage } = useContext(RestaurantContext);\n\n    const makeOptions = (options) => {\n        return options.map(option => <option key={ option } >{ option }</option>)\n    }\n\n    const stateCodes = [\"AK\", \"AL\", \"AR\", \"AZ\", \"CA\", \"CO\", \"CT\", \"DE\", \"FL\", \"GA\", \"HI\", \"IA\", \"ID\", \n                        \"IL\", \"IN\", \"KS\", \"KY\", \"LA\", \"MA\", \"MD\", \"ME\", \"MI\", \"MN\", \"MO\", \"MS\", \"MT\",\n                        \"NC\", \"ND\", \"NE\", \"NH\", \"NJ\", \"NM\", \"NV\", \"NY\", \"OH\", \"OK\", \"OR\", \"PA\",\n                        \"RI\", \"SC\", \"SD\", \"TN\", \"TX\", \"UT\", \"VA\", \"VT\", \"WA\", \"WI\", \"WV\", \"WY\"]\n\n    const searchSubmit = (e) => {\n        e.preventDefault()\n        const searchTerm = document.querySelector('.search').value\n        setSearch(searchTerm)\n        setPage(1)\n    }\n\n    const handleChange = (e) => {\n        const searchTerm = e.target.value\n        if(searchTerm === \"\"){\n            setSearch(\"\")\n            setPage(1)\n        }\n    }\n\n    const toggleFiltersActive = (e) => {\n        e.preventDefault()\n        setFiltersActive(!filtersActive)\n    }\n\n    const chooseState = (e) => {\n        setStateFilter(e.target.value)\n        setPage(1)\n    }\n\n    const chooseGenre = (e) => {\n        setGenreFilter(e.target.value)\n        setPage(1)\n    }\n\n    return (\n        <form>\n            <div>\n                <label htmlFor=\"State\">Filter By State</label>\n                <select className=\"state-select\" name=\"State\" onChange={chooseState} >\n                    <option>All</option>\n                    {makeOptions(stateCodes)}\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"Genre\">Filter By Type of Restaurant</label>\n                <select className=\"genre-select\" name=\"Genre\" onChange={chooseGenre} >\n                    <option>All</option>\n                    {makeOptions(genres)}\n                </select>\n            </div>\n            <div>\n                <label htmlFor=\"Search\">Search by Name, City, or Type</label>\n                <input className='search' placeholder=\"Search\" name=\"Search\" onChange={handleChange}/>\n                <button className='search-button' onClick={searchSubmit} >Submit</button>\n                <button onClick={toggleFiltersActive}>{\n                    filtersActive\n                    ? \"Remove Filters\"\n                    : \"Add Filters\"\n                }</button>\n            </div>\n        </form>\n    )\n}\n\nexport default FilterControls","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { fetchRestaurants } from '../../utilities';\nimport RestaurantContext from '../../context/restaurantContext';\nimport RestaurantsTable from '../RestaurantsTable';\nimport FilterControls from '../FilterControls';\n\nfunction App() {\n\n  const [restaurants, setRestaurants] = useState([])\n  const [genres, setGenres] = useState([])\n  const [genreFilter, setGenreFilter] = useState(\"All\")\n  const [stateFilter, setStateFilter] = useState(\"All\")\n  const [search, setSearch] = useState(\"\")\n  const [filtersActive, setFiltersActive] = useState(true)\n  const [page, setPage] = useState(1)\n\n  const auth = \"Api-Key \" + process.env.REACT_APP_AUTH\n\n  const makeGenresList = (restaurants) => {\n    let genresNoDupes = []\n    let genresArray = restaurants.map(restaurant => restaurant.genre)\n    let genresAsArray = genresArray.map(genreString => genreString.split(\",\"))\n    genresAsArray.forEach(genresList => {\n      for(let i = 0; i < genresList.length; i++) {\n        if(!genresNoDupes.includes(genresList[i])){\n          genresNoDupes.push(genresList[i])\n        }\n      }\n    })\n\n    setGenres(genresNoDupes)\n  }\n\n  useEffect( () => {\n    fetchRestaurants(auth, setRestaurants)\n    makeGenresList(restaurants)\n  }, [restaurants])\n\n  const tableHeadings = [\"Name\", \"City\", \"State\", \"Phone Number\", \"Genres\"]\n\n  const rowKeys = [\"name\", \"city\", \"state\", \"telephone\", \"genre\"]\n\n  return (\n    <RestaurantContext.Provider value={{\n        tableHeadings,\n        rowKeys,\n        restaurants,\n        genres,\n        genreFilter,\n        setGenreFilter,\n        stateFilter,\n        setStateFilter,\n        search,\n        setSearch,\n        setRestaurants,\n        filtersActive,\n        setFiltersActive,\n        page,\n        setPage\n      }\n    }>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Restaurant Table App</h1>\n        </header>\n        <main>\n          <section>\n            <FilterControls />\n          </section>\n          <section>\n            <RestaurantsTable />\n          </section>\n        </main>\n      </div>\n    </RestaurantContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}